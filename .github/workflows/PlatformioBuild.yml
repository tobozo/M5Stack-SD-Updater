name: PlatformIOBuild

env:
  PROJECT_DIR: examples/Test/build_test
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

on:
  push:
    paths:
    - '**.ino'
    - '**.ini'
    - '**.cpp'
    - '**.hpp'
    - '**.h'
    - '**.c'
    - '**PlatformioBuild.yml'
  pull_request:
  workflow_dispatch:

jobs:

  plan_version:
    name: Version planner
    runs-on: ubuntu-latest
    env:
      pio-envs: (lgfx m5stick-c m5stack-core-esp32 m5stack-core2 m5unified s3box m5stack-atom m5stack-cores3 sdfat-test)
      max-versions: 5
    outputs:
      matrix: ${{steps.set-matrix.outputs.matrix}}
      project_dir: ${{steps.set-matrix.outputs.project_dir}}
      branch_name: ${{steps.set-matrix.outputs.branch_name}}

    steps:
    - name: "Fetch arduino cores versions list"
      id: set-matrix
      run: |
        json=`curl -s "https://espressif.github.io/arduino-esp32/package_esp32_index.json"` # get esp32 packages list
        last_versions=(`echo $json | jq -r .packages[0].platforms[].version | awk "NR <= ${{ env.max-versions}}"`) # fetch last 5 version, store in a bash array
        versions_json=`printf '%s\n' "${last_versions[@]}" | jq -R . | jq -s .` # convert last versions to json array
        pc_arr=${{env.pio-envs}} # get supported platformio env's
        pc_json_arr=`printf '%s\n' "${pc_arr[@]}" | jq -R . | jq -s .` # convert to json array
        content=`printf '{"pio-env":%s,"platform-version":%s}' "$pc_json_arr" "$versions_json"` # create the matrix array
        content="${content//'%'/'%25'}" # escape percent entities
        content="${content//$'\n'/''}"  # remove lf
        content="${content//$'\r'/''}"  # remove cr
        echo "matrix=${content}" >> $GITHUB_OUTPUT
        echo "project_dir=${{env.PROJECT_DIR}}" >> $GITHUB_OUTPUT
        echo "branch_name=${{env.BRANCH_NAME}}" >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.pio-env }}@${{ matrix.platform-version }}
    needs: plan_version
    env:
      PROJECT_DIR: examples/Test/build_test
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{fromJSON(needs.plan_version.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          pio update
          pio upgrade

      - name: Run PlatformIO
        run: |
          cd ${{ needs.plan_version.outputs.project_dir }}
          export pio_ver=${{ matrix.platform-version }}
          # append "test" profile to the current platformio.ini
          echo "[env:test]">>platformio.ini
          echo "extends = env:${{ matrix.pio-env }}">>platformio.ini
          echo "platform = https://github.com/tasmota/platform-espressif32">>platformio.ini
          echo "platform_packages = framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32/releases/download/${pio_ver}/esp32-${pio_ver}.zip">>platformio.ini
          # keep cache and dev_lib_deps.ini unless running from the master branch
          [[ "${{ needs.plan_version.outputs.branch_name }}" == "master" ]] && rm dev_lib_deps.ini || echo "Develop!" && pio system prune -f
          # install local version of the library
          pio pkg install -e test --no-save --library file://$(realpath ../../../)
          pio run -e test

