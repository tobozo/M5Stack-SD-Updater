name: PlatformIOBuild

# env:
#   PROJECT_DIR: examples/Test/build_test
#   BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

on:
  push:
    paths:
    - '**.ino'
    - '**.ini'
    - '**.cpp'
    - '**.hpp'
    - '**.h'
    - '**.c'
    - '**PlatformioBuild.yml'
  pull_request:
  workflow_dispatch:

jobs:

  plan_version:
    name: Version planner
    runs-on: ubuntu-latest
    env:
      piocontexts: ('lgfx' 'm5stick-c' 'm5stack-core-esp32' 'm5stack-core2' 'm5unified' 's3box' 'm5stack-atom' 'm5stack-cores3' 'sdfat-test')
      pio-envs: ["lgfx", "m5stick-c", "m5stack-core-esp32", "m5stack-core2", "m5unified", "s3box", "m5stack-atom", "m5stack-cores3", "sdfat-test"]
    outputs:
      matrix: ${{steps.set-matrix.outputs.matrix}}
    steps:
    - name: "Fetch arduino cores versions list"
      id: set-matrix
      run: |
        # get esp32 packages list
        json=`curl -s "https://espressif.github.io/arduino-esp32/package_esp32_index.json"`
        # fetch last 5 version, store in a bash array
        last_versions=(`echo $json | jq -r .packages[0].platforms[].version | awk "NR <= 5"`)
        # convert to json array
        versions_json=`printf '%s\n' "${last_versions[@]}" | jq -R . | jq -s .`
        # pc_arr=${{env.piocontexts}}
        pc_arr=${{ toJson( env.pio-envs ) }}

        # pc_arr=('lgfx' 'm5stick-c' 'm5stack-core-esp32' 'm5stack-core2' 'm5unified' 's3box' 'm5stack-atom' 'm5stack-cores3' 'sdfat-test')
        pc_json_arr=`printf '%s\n' "${pc_arr[@]}" | jq -R . | jq -s .`

        content=`printf '{"piocontext":%s,"platform-version":%s}' "$pc_json_arr" "$versions_json"`
        content="${content//'%'/'%25'}" # escape percent entities
        content="${content//$'\n'/''}"  # remove lf
        content="${content//$'\r'/''}"  # remove cr
        echo "matrix=${content}" >> $GITHUB_OUTPUT



  build:
    name: ${{ matrix.piocontext }}@${{ matrix.platform-version }}
    needs: plan_version
    #env: ${{fromJSON(needs.plan_version.outputs.env)}}
    env:
      PROJECT_DIR: examples/Test/build_test
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{fromJSON(needs.plan_version.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          pio update
          pio upgrade

      - name: Run PlatformIO
        run: |
          cd ${{ env.PROJECT_DIR }}
          export pio_ver=${{ matrix.platform-version }}
          # export pio_ver=${{ matrix.platform-version }}
          export pio_env="${pio_ver//./_}"
          [[ "${{ env.BRANCH_NAME }}" == "master" ]] && rm dev_lib_deps.ini || echo "Develop!" && pio system prune -f
          pio pkg install -e ${{ matrix.piocontext }}-$pio_env --no-save --library file://$(realpath ../../../)
          pio run -e ${{ matrix.piocontext }}-$pio_env

